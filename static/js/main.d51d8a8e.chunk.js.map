{"version":3,"sources":["App.js","serviceWorker.js","Component/CreateTasks/Task.js","Component/CreateTasks/ToDoListFooter.js","Component/CreateTasks/CreateTasks.js","index.js"],"names":["App","className","Boolean","window","location","hostname","match","Task","props","deleteTask","parentDeleteCallback","task","id","updateTask","isDone","parentUpdateCallback","this","tasks","filter","filteredTasks","console","log","type","defaultChecked","checked","onClick","value","title","onChange","e","target","DeleteOutlined","color","Component","ToDoListFooter","t","length","onFilterChanged","clearCompleted","CreateTasks","createTask","key","setState","state","currentTarget","Date","now","inputValue","taskId","newTaskList","newMainObject","forEach","changeFilter","filterValue","getItems","placeholder","onKeyPress","map","item","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d51d8a8e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport { Checkbox } from \"antd\";\nimport { DeleteOutlined } from '@ant-design/icons';\nimport \"antd/dist/antd.css\";\n\nclass Task extends Component {\n  constructor(props) {\n    super(props);\n\n    this.parentDeleteCallback = props.deleteTask;\n    this.parentUpdateCallback = props.updateTask;\n  }\n\n  deleteTask = () => {\n    this.parentDeleteCallback(this.props.task.id);\n  };\n  \n  updateTask = () => {\n    var task = {\n        ...this.props.task\n    }\n    task.isDone = !task.isDone\n    this.parentUpdateCallback(task);\n  };\n\n  render() {\n    const {tasks, filter} = this.props\n\n    let filteredTasks = []\n    console.log(filteredTasks);\n    if (filter === 'all') filteredTasks = tasks\n    if (filter === 'active') filteredTasks = tasks.filter((task) => !task.isDone)\n    if (filter === 'completed') filteredTasks = tasks.filter((task) => task.isDone)\n\n    return (\n      <div className=\"task\">\n        <div>\n          <Checkbox\n              // className='checkbox'\n              type=\"checkbox\"\n              defaultChecked={this.props.checked}\n              onClick={this.updateTask}\n            />\n        </div>\n        <div>\n          <p>\n            <input type=\"text\" value={this.props.task.title}\n              checked={this.props.task.isDone}\n              className={this.props.task.isDone ? \"task-input is-done\" : \"task-input\"}\n              onChange={(e) => {this.props.updateTask(e.target.value)}}\n            />\n            <span className=\"close\" onClick={this.deleteTask}>\n              <DeleteOutlined color='red'/>\n            </span>\n          </p>\n        </div>\n       \n      </div>\n    );\n  }\n}\n\nexport default Task;\n","import React, { Component } from \"react\";\nimport { Button } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nclass ToDoListFooter extends Component {\n\n  render() {\n    let {tasks} = this.props\n    \n    return (\n      <div className=\"todolist-footer\">\n        <div className=\"buttons\">\n          <div>\n            <span className='items-left'>\n              {tasks.filter((t) => !t.isDone).length} items left\n            </span>\n          </div>\n          <Button\n            // className={filter.value === 'all' ? 'selected' : \"\"}\n            onClick={() => this.props.onFilterChanged(null)}\n            // data-value=\"all\"\n          >\n            All\n          </Button>\n          <Button\n            // className={filter.value === 'active' ? 'selected' : \"\"}\n            onClick={() => this.props.onFilterChanged(true)}\n            // data-value=\"active\"\n          >\n            Active\n          </Button>\n          <Button\n            // className={filter.value === 'completed' ? 'selected' : \"\"}\n            onClick={() => this.props.onFilterChanged(false)}\n            // data-value=\"completed\"\n          >\n            Completed\n          </Button>\n          <div>\n            <span className='completed' onClick={this.props.clearCompleted}>Clear completed</span> \n        </div>\n        </div>\n       \n      </div>\n    );\n  }\n}\n\nexport default ToDoListFooter;\n","import React, { Component } from \"react\";\nimport Task from \"./Task\";\nimport ToDoListFooter from './ToDoListFooter'\nimport { Input } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nclass CreateTasks extends Component {\n  constructor() {\n    super();\n    this.state = {\n      tasks: [\n        {\n          title: \"learn JS\",\n          isDone: false,\n          id: Date.now(),\n        },\n      ],\n      inputValue: \"\",\n      // filter: 'all',\n      filter: null\n    };\n  }\n\n  createTask = (e) => {\n    if (e.key === \"Enter\") {\n      this.setState({\n        tasks: [\n          ...this.state.tasks,\n          { title: e.currentTarget.value, isDone: false, id: Date.now() },\n        ],\n        inputValue: \"\",\n      });\n    }\n  };\n\n  onChange = (e) => {\n    this.setState({\n      ...this.state.tasks,\n      inputValue: e.currentTarget.value,\n    });\n  };\n\n  deleteTask = (taskId) => {\n    const newTaskList = this.state.tasks.filter((task) => {\n      return task.id !== taskId;\n    });\n    this.setState({\n      tasks: newTaskList,\n    });\n  };\n\n  updateTask = (task) => {\n    const newMainObject = [...this.state.tasks]\n\n    newMainObject.forEach((t) => {\n      if (t.id === task.id) {\n        t.isDone = task.isDone\n        return\n      }\n\n      this.setState({\n        tasks: newMainObject\n      })\n    })\n  };\n\n  // changeFilter(filterValue) {\n  //   console.log(filterValue);\n  //   this.setState({\n  //     filter: filterValue\n  //   })\n  // }\n  changeFilter = (filterValue) => {\n    console.log(filterValue);\n    this.setState({\n      filter: filterValue\n    })\n  }\n\n  clearCompleted = () => {\n    this.setState({\n      tasks: this.state.tasks.filter((t) => !t.isDone)\n    })\n  }\n\n  getItems = (filterValue) => {\n    const { tasks } = this.state\n    if (filterValue === null ) return tasks\n    if (filterValue === true ) {\n      return tasks.filter(task => task.isDone === false)\n    }\n    if (filterValue === false) {\n      return tasks.filter(task => task.isDone === true)\n    }\n  }\n\n  render() {\n    const { filter } = this.state\n    const tasks = this.getItems(filter)\n    return (\n      <div className=\"wrapper\">\n        <h1 >To Do List</h1>\n        <Input \n          type=\"text\"\n          placeholder=\"Enter task\"\n          onChange={this.onChange}\n          value={this.state.inputValue}\n          onKeyPress={this.createTask}\n        />\n        <div className=\"tasks\">\n          {tasks.map((item) => {\n            return (\n              \n                <Task task={item}\n                  key={item.id}\n                  deleteTask={this.deleteTask}\n                  updateTask={this.updateTask}\n                />\n              \n            );\n          })}\n        </div>\n        <ToDoListFooter\n          tasks={this.state.tasks}\n          onFilterChanged={this.changeFilter}\n          clearCompleted={this.clearCompleted}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CreateTasks;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport CreateTasks from './Component/CreateTasks/CreateTasks'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <CreateTasks/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}